//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace BRCM_B2B.WebReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SmtpServiceSoap", Namespace="http://tempuri.org/SmtpService/SmtpService")]
    public partial class SmtpService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GeterrMsgOperationCompleted;
        
        private ContainsKey containsKeyValueField;
        
        private System.Threading.SendOrPostCallback SendMailOperationCompleted;
        
        private System.Threading.SendOrPostCallback WMSendMailOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveAttachmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback CleanAttachOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SmtpService() {
            this.Url = global::BRCM_B2B.Properties.Settings.Default.BRCM_B2B_WebReference_SmtpService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public ContainsKey ContainsKeyValue {
            get {
                return this.containsKeyValueField;
            }
            set {
                this.containsKeyValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GeterrMsgCompletedEventHandler GeterrMsgCompleted;
        
        /// <remarks/>
        public event SendMailCompletedEventHandler SendMailCompleted;
        
        /// <remarks/>
        public event WMSendMailCompletedEventHandler WMSendMailCompleted;
        
        /// <remarks/>
        public event SaveAttachmentCompletedEventHandler SaveAttachmentCompleted;
        
        /// <remarks/>
        public event CleanAttachCompletedEventHandler CleanAttachCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SmtpService/SmtpService/GeterrMsg", RequestNamespace="http://tempuri.org/SmtpService/SmtpService", ResponseNamespace="http://tempuri.org/SmtpService/SmtpService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GeterrMsg() {
            object[] results = this.Invoke("GeterrMsg", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GeterrMsgAsync() {
            this.GeterrMsgAsync(null);
        }
        
        /// <remarks/>
        public void GeterrMsgAsync(object userState) {
            if ((this.GeterrMsgOperationCompleted == null)) {
                this.GeterrMsgOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGeterrMsgOperationCompleted);
            }
            this.InvokeAsync("GeterrMsg", new object[0], this.GeterrMsgOperationCompleted, userState);
        }
        
        private void OnGeterrMsgOperationCompleted(object arg) {
            if ((this.GeterrMsgCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GeterrMsgCompleted(this, new GeterrMsgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ContainsKeyValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SmtpService/SmtpService/SendMail", RequestNamespace="http://tempuri.org/SmtpService/SmtpService", ResponseNamespace="http://tempuri.org/SmtpService/SmtpService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMail(MailStruct obj) {
            object[] results = this.Invoke("SendMail", new object[] {
                        obj});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMailAsync(MailStruct obj) {
            this.SendMailAsync(obj, null);
        }
        
        /// <remarks/>
        public void SendMailAsync(MailStruct obj, object userState) {
            if ((this.SendMailOperationCompleted == null)) {
                this.SendMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMailOperationCompleted);
            }
            this.InvokeAsync("SendMail", new object[] {
                        obj}, this.SendMailOperationCompleted, userState);
        }
        
        private void OnSendMailOperationCompleted(object arg) {
            if ((this.SendMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMailCompleted(this, new SendMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SmtpService/SmtpService/WMSendMail", RequestNamespace="http://tempuri.org/SmtpService/SmtpService", ResponseNamespace="http://tempuri.org/SmtpService/SmtpService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool WMSendMail(string mailto, string from, string cc, string subject, string msg) {
            object[] results = this.Invoke("WMSendMail", new object[] {
                        mailto,
                        from,
                        cc,
                        subject,
                        msg});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void WMSendMailAsync(string mailto, string from, string cc, string subject, string msg) {
            this.WMSendMailAsync(mailto, from, cc, subject, msg, null);
        }
        
        /// <remarks/>
        public void WMSendMailAsync(string mailto, string from, string cc, string subject, string msg, object userState) {
            if ((this.WMSendMailOperationCompleted == null)) {
                this.WMSendMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWMSendMailOperationCompleted);
            }
            this.InvokeAsync("WMSendMail", new object[] {
                        mailto,
                        from,
                        cc,
                        subject,
                        msg}, this.WMSendMailOperationCompleted, userState);
        }
        
        private void OnWMSendMailOperationCompleted(object arg) {
            if ((this.WMSendMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WMSendMailCompleted(this, new WMSendMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ContainsKeyValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SmtpService/SmtpService/SaveAttachment", RequestNamespace="http://tempuri.org/SmtpService/SmtpService", ResponseNamespace="http://tempuri.org/SmtpService/SmtpService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SaveAttachment(string name, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] Buffer) {
            object[] results = this.Invoke("SaveAttachment", new object[] {
                        name,
                        Buffer});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SaveAttachmentAsync(string name, byte[] Buffer) {
            this.SaveAttachmentAsync(name, Buffer, null);
        }
        
        /// <remarks/>
        public void SaveAttachmentAsync(string name, byte[] Buffer, object userState) {
            if ((this.SaveAttachmentOperationCompleted == null)) {
                this.SaveAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveAttachmentOperationCompleted);
            }
            this.InvokeAsync("SaveAttachment", new object[] {
                        name,
                        Buffer}, this.SaveAttachmentOperationCompleted, userState);
        }
        
        private void OnSaveAttachmentOperationCompleted(object arg) {
            if ((this.SaveAttachmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveAttachmentCompleted(this, new SaveAttachmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ContainsKeyValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SmtpService/SmtpService/CleanAttach", RequestNamespace="http://tempuri.org/SmtpService/SmtpService", ResponseNamespace="http://tempuri.org/SmtpService/SmtpService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CleanAttach() {
            object[] results = this.Invoke("CleanAttach", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CleanAttachAsync() {
            this.CleanAttachAsync(null);
        }
        
        /// <remarks/>
        public void CleanAttachAsync(object userState) {
            if ((this.CleanAttachOperationCompleted == null)) {
                this.CleanAttachOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCleanAttachOperationCompleted);
            }
            this.InvokeAsync("CleanAttach", new object[0], this.CleanAttachOperationCompleted, userState);
        }
        
        private void OnCleanAttachOperationCompleted(object arg) {
            if ((this.CleanAttachCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CleanAttachCompleted(this, new CleanAttachCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/SmtpService/SmtpService")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://tempuri.org/SmtpService/SmtpService", IsNullable=false)]
    public partial class ContainsKey : System.Web.Services.Protocols.SoapHeader {
        
        private string containsKey1Field;
        
        private string userNameField;
        
        private string passwordField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ContainsKey")]
        public string ContainsKey1 {
            get {
                return this.containsKey1Field;
            }
            set {
                this.containsKey1Field = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/SmtpService/SmtpService")]
    public partial class MailStruct {
        
        private string mailtoField;
        
        private string ccField;
        
        private string bccField;
        
        private string fromField;
        
        private string subjectField;
        
        private string bodyField;
        
        private MailFormat formatField;
        
        private MailPriority priorityField;
        
        private MailEncoding encodeField;
        
        /// <remarks/>
        public string mailto {
            get {
                return this.mailtoField;
            }
            set {
                this.mailtoField = value;
            }
        }
        
        /// <remarks/>
        public string cc {
            get {
                return this.ccField;
            }
            set {
                this.ccField = value;
            }
        }
        
        /// <remarks/>
        public string bcc {
            get {
                return this.bccField;
            }
            set {
                this.bccField = value;
            }
        }
        
        /// <remarks/>
        public string from {
            get {
                return this.fromField;
            }
            set {
                this.fromField = value;
            }
        }
        
        /// <remarks/>
        public string subject {
            get {
                return this.subjectField;
            }
            set {
                this.subjectField = value;
            }
        }
        
        /// <remarks/>
        public string body {
            get {
                return this.bodyField;
            }
            set {
                this.bodyField = value;
            }
        }
        
        /// <remarks/>
        public MailFormat format {
            get {
                return this.formatField;
            }
            set {
                this.formatField = value;
            }
        }
        
        /// <remarks/>
        public MailPriority priority {
            get {
                return this.priorityField;
            }
            set {
                this.priorityField = value;
            }
        }
        
        /// <remarks/>
        public MailEncoding encode {
            get {
                return this.encodeField;
            }
            set {
                this.encodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/SmtpService/SmtpService")]
    public enum MailFormat {
        
        /// <remarks/>
        Text,
        
        /// <remarks/>
        Html,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/SmtpService/SmtpService")]
    public enum MailPriority {
        
        /// <remarks/>
        Normal,
        
        /// <remarks/>
        Low,
        
        /// <remarks/>
        High,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/SmtpService/SmtpService")]
    public enum MailEncoding {
        
        /// <remarks/>
        UUEncode,
        
        /// <remarks/>
        Base64,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void GeterrMsgCompletedEventHandler(object sender, GeterrMsgCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GeterrMsgCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GeterrMsgCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void SendMailCompletedEventHandler(object sender, SendMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void WMSendMailCompletedEventHandler(object sender, WMSendMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WMSendMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WMSendMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void SaveAttachmentCompletedEventHandler(object sender, SaveAttachmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveAttachmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveAttachmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void CleanAttachCompletedEventHandler(object sender, CleanAttachCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CleanAttachCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CleanAttachCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591